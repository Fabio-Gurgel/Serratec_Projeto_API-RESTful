package org.br.serratec.exception;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

	@Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
            HttpHeaders headers, HttpStatus status, WebRequest request) {
        List<String> erros = new ArrayList<>();
        for(FieldError fe :ex.getFieldErrors()) {
            erros.add(fe.getField() + ": " + fe.getDefaultMessage());
        }
        ErroResposta erroResposta = new ErroResposta(status.value(), "Existem campos inválidos", LocalDateTime.now(), erros);
        return super.handleExceptionInternal(ex, erroResposta,headers, status, request);
    }
	
    @ExceptionHandler(DataPedidoAnteriorException.class)
    public ResponseEntity<Object> handleDataEmprestimoAnteriorException(DataPedidoAnteriorException ex) {
        List<ErroCampo> erros = new ArrayList<>();
        erros.add(new ErroCampo("dataEmprestimo",  "Data empréstimo não pode ser anterior a data de hoje."));

        ErroResposta erroResposta = new ErroResposta(HttpStatus.BAD_REQUEST.value(), "Existem Campos Inválidos", LocalDateTime.now(),
                erros);
        return ResponseEntity.badRequest().body(erroResposta);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
            HttpHeaders headers, HttpStatus status, WebRequest request) {
        return ResponseEntity.badRequest().body(ex.getMessage());
    }
}
