package org.br.serratec.exception;

@ControllerAdvice
public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
            HttpHeaders headers, HttpStatus status, WebRequest request) {

        List<ErroCampo> erros = new ArrayList<>();
        for (FieldError error : ex.getBindingResult().getFieldErrors()) {
            erros.add(new ErroCampo(error.getField(), error.getDefaultMessage()));
        }
        ErroResposta erroResposta = new ErroResposta(status.value(), "Existem Campos Inválidos", LocalDateTime.now(),
                erros);
        return super.handleExceptionInternal(ex, erroResposta, headers, status, request);
    }
    @ExceptionHandler(DataEmprestimoAnteriorException.class)
    public ResponseEntity<Object> handleDataEmprestimoAnteriorException(DataEmprestimoAnteriorException ex) {
        List<ErroCampo> erros = new ArrayList<>();
        erros.add(new ErroCampo("dataEmprestimo",  "Data empréstimo não pode ser anterior a data de hoje."));

        ErroResposta erroResposta = new ErroResposta(HttpStatus.BAD_REQUEST.value(), "Existem Campos Inválidos", LocalDateTime.now(),
                erros);
        return ResponseEntity.badRequest().body(erroResposta);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
            HttpHeaders headers, HttpStatus status, WebRequest request) {
        return ResponseEntity.badRequest().body(ex.getMessage());
    }
